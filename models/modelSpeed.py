"""
–ú–æ–¥—É–ª—å —Ä–∞—Å—á—ë—Ç–∞ —Ç–æ—Ä–º–æ–∑–Ω–æ–≥–æ –ø—É—Ç–∏ –∏–Ω—Ç–µ—Ä–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏

    –í—ã–ø—É—Å–∫–Ω–∞—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –±–∞–∫–∞–ª–∞–≤—Ä–∞
    –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥—Å–∫–∏–π –ø–æ–ª–∏—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –ü–µ—Ç—Ä–∞ –í–µ–ª–∏–∫–æ–≥–æ
    –ò–Ω—Å—Ç–∏—Ç—É—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –Ω–∞—É–∫ –∏ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    –í—ã—Å—à–∞—è —à–∫–æ–ª–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
    –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 09.03.01 –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ –∏ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞
    2024 –≥–æ–¥

@author: –ñ—É—Ä–∞–≤—Å–∫–∏–π –ò–ª—å—è –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á

"""

import pandas as pd
import math
import matplotlib.pyplot as plt
from matplotlib.pyplot import cm
import numpy as np

import models
from models.dopFunc import getFmt as getFmt
from models.dopFunc import get_eps_by_name as get_eps_by_name

import tkinter as tk
from tkinter import ttk

from matplotlib.backends.backend_tkagg import (FigureCanvasTkAgg,
                                               NavigationToolbar2Tk)

class modelSpeed:
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞
    def __init__(self, parTrain, parLoko, extCondition):
        self.parTrain = parTrain.copy()
        if 'id' in parTrain.columns:
            self.parTrain.drop(['id'], inplace=True, axis=1)
        self.parLoko = parLoko.copy()
        df = pd.DataFrame()
        df.index = extCondition.index
        df[['v0','slope','step','type']] = extCondition[['v0','slope','step','type']]
        self.extCondition = df
        self.speed = extCondition['v0'][0]
        self.interval = extCondition['step'][0]
        self.ic = extCondition['slope'][0]
        self.bT = 0.0
        self.passenger = extCondition['type'][0] > 0
        self.Fikp = 0.0
        self.wox = 0.0
        self.c = 0.0
        self.Ploc = parLoko['massa'][0]
        self.eps = get_eps_by_name(parLoko['name'][0])
        self.Pvag = 0.0
        self.nOSv = 0
        self.df_rezult = 0
        self.df_rezTable= 0
        self.plt_rezult = 0
        self.tables = []
        self.lab_names=['–£—Å–ª–æ–≤–∏—è —Ä–∞—Å—á—ë—Ç–∞', '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–æ–∫–æ–º–æ—Ç–∏–≤–∞', '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Å—Ç–∞–≤–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º –≤–∞–≥–æ–Ω–æ–≤',
                   '–¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤', '–¢–∞–±–ª–∏—Ü–∞ –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º','–ì—Ä–∞—Ñ–∏–∫']
        SKp = [0.0, 0,0, 0,0]
        SKp[parLoko['pads'][0]] = parLoko['axles'][0] * parLoko['force'][0]
        for index, row in parTrain.iterrows():
            p = int(row['pads'])
            SKp[p] = SKp[p] + row['count'] * row['force'] * row['axles']
            self.Pvag = self.Pvag + row['count'] * row['massa']
            self.nOSv = self.nOSv + row['count'] * row['axles']
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ùúóp –ø–æ —Ñ–æ—Ä–º—É–ª–µ (2)
        self.Teta = [x / (self.Pvag + self.Ploc) for x in SKp] # ]round(self.SKp / (self.Pvag + self.Ploc),3)

    def calcFi(self,pads,v):
        if pads == 0:
            return 0.27*(v+100.0)/(5.0*v+100.0) # —á—É–≥—É–Ω (6)
        elif pads == 1:
            return 0.3*(v+100.0)/(5.0*v+100.0) # —á—É–≥—É–Ω —Å —Ñ–æ—Å—Ñ–æ—Ä–æ–º (7)
        else:
            return 0.36*(v+150.0)/(2.0*v+150.0) # –∫–æ–º–ø–æ–∑–∏—Ç (8)
    # —Ä–∞—Å—á—ë—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏
    def calcSp(self,V0):
        bT0 = round(1000.0 * sum([self.Teta[i] * self.calcFi(i, V0) for i in range(3)]),1)
        if self.passenger: # –ø–∞—Å—Å–∞–∂–∏—Ä—Å–∫–∏–µ (50)
            tp = 4 - 5.0 * self.ic / bT0
        else: # –≥—Ä—É–∑–æ–≤—ã–µ –ø–æ–µ–∑–¥–∞
            if self.nOSv <= 200:
                tp = 7 - 10.0 * self.ic / bT0 # –¥–ª—è 200 –æ—Å–µ–π –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ (48)
            else:
                tp = 10 - 15.0 * self.ic / bT0 # –¥–ª—è –±–æ–ª–µ–µ 200 –æ—Å–µ–π (49)
        Sp = round(V0 * tp / 3.6, 1)
        return {'Sp':Sp,'tp':tp}

    def calcForSpeed(self, v = 0.0):
        if v < 0.0:
            v = 0.0
        if v == 0:
            v = self.speed
        # —Ñ–æ—Ä–º—É–ª—ã
        # (53) –æ—Å–Ω–æ–≤–Ω–æ–µ —É–¥–µ–ª—å–Ω–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –ø–æ–µ–∑–¥–∞
        def calcWox(v):
           def Wo(v):
               if self.nOSv == 0:
                   return 0.0
               qo = self.Pvag / self.nOSv # —Å—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞ –æ—Å–∏ –≤–∞–≥–æ–Ω–∞ –Ω–∞ —Ä–µ–ª—å—Å—ã
               if self.passenger:
               # (57) —É–¥–µ–ª—å–Ω–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –ø–∞—Å—Å–∞–∂–∏—Ä—Å–∫–∏—Ö –≤–∞–≥–æ–Ω–æ–≤
                   return 1.2 + 0.012 * v + 0.0002 * v * v
               else:
               # (55) —É–¥–µ–ª—å–Ω–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤—ã—Ö –≤–∞–≥–æ–Ω–æ–≤
                   return 0.7 + (8 + 0.1 * v + 0.0025 * v * v) / qo
           def Wx(v): # (54) —É–¥–µ–ª—å–Ω–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –ª–æ–∫–æ–º–æ—Ç–∏–≤–∞ –Ω–∞ —Ö–æ–ª–æ—Å—Ç–æ–º —Ö–æ–¥—É
               return 2.4 + 0.011 * v + 0.00035 * v * v

           return (Wo(v) * self.Pvag + Wx(v) * self.Ploc)/(self.Ploc + self.Pvag)

# –†–∞—Å—á–∏—Ç—ã–≤–∞–µ–º b—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–æ —Ñ–æ—Ä–º—É–ª–µ (1)
        self.Fikp = round(self.calcFi(0, v),3)
# –†–∞—Å—á–∏—Ç—ã–≤–∞–µ–º b—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–æ —Ñ–æ—Ä–º—É–ª–µ (1)
#        self.bT = round(1000.0 * self.Teta * self.Fikp,1)
        self.bT = round(1000.0 * sum([self.Teta[i] *
                                      self.calcFi(i, v) for i in range(3)]),1)
        self.wox = round(calcWox(v),1)
        self.c = round(self.bT + self.wox + self.ic,1)
        return pd.DataFrame([[self.Fikp, self.bT, self.wox, self.ic, self.c]],
                            columns=['Fikp','bT','wox','ic','c'])

    # ---------------------------------------------------------------------------
    #
    #  –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞—Å—á—ë—Ç
    #
    # ---------------------------------------------------------------------------
    def calculate(self):
        V0 = self.speed
        dV = self.interval
        res = pd.DataFrame(columns=['Vst','Ven','Vmid','Fikp','bT',
                                    'wox','ic','c','St','t'])
        res2 = pd.DataFrame(columns=['all_vag','all_axes','all_massa','full_massa',
            'Sp','tp','Sd','td','Sf','tf'])
        res2['all_vag'] = [self.parTrain['count'].sum()]
        res2['all_axes'] = [self.nOSv]
        res2['all_massa'] = [self.Pvag]
        res2['full_massa'] = [self.Pvag + self.Ploc]
# —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        numInt = math.ceil(V0 / dV)
# –ø–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ —Å–∫–æ—Ä–æ—Å—Ç–∏
        Vint = [[min(V0, dV * (i + 1)), dV * i] for i in range(numInt)][::-1]
        res['Vst'] = [Vint[i][0] for i in range(numInt)]
        res['Ven'] = [Vint[i][1] for i in range(numInt)]
# –†–∞—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω—é—é —Å–∫–æ—Ä–æ—Å—Ç—å –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ
        Vmid = [(Vint[i][0] + Vint[i][1]) /  2 for i in range(numInt)]
       	res['Vmid'] = Vmid
        for idx, row in res.iterrows():
           stp = self.calcForSpeed(row['Vmid'])
           res.at[idx,'Fikp'] = stp.at[0,'Fikp']
           res.at[idx,'bT'] = stp.at[0,'bT']
           res.at[idx,'wox'] = stp.at[0,'wox']
           res.at[idx,'ic'] = stp.at[0,'ic']
           res.at[idx,'c'] = stp.at[0,'c']
           St = round(500.0 / self.eps *(row['Vst']**2 - row['Ven']**2)/stp.at[0,'c'] ,1)
           res.at[idx,'St'] = St
           res.at[idx,'t'] = round(St/row['Vmid']*3.6,1)
        stp = self.calcSp(V0)
        res2['Sp'] =[stp['Sp']]
        res2['tp'] =[stp['tp']]
        res2['Sd'] =[res['St'].sum()]
        res2['td'] =[res['t'].sum()]
        res2['Sf'] =[res2.at[0,'Sd']+res2.at[0,'Sp']]
        res2['tf'] =[res2.at[0,'td']+res2.at[0,'tp']]
        def generatePlot():
            x = ["–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞"]
            y = [res.at[0,'Vst']]
            w = [res2.at[0,'Sp']]
            if (round(dV, 0)-dV) != 0.0:
                fmt = r'{:2.1f}-{:2.1f}  –∫–º/—á'
            else:
                fmt = r'{:1.0f}-{:1.0f}  –∫–º/—á'
            for idx, row in res.iterrows():
                x.append(fmt.format(row['Vst'],row['Ven']))
                #x.append(f"{int(row['Vmid'])} –∫–º/—á")
                y.append(row['Vmid'])
                w.append(row['St'])

            colors = cm.rainbow(np.linspace(0.9, 0.1, len(w))).tolist()
            colors.insert(0,"gainsboro")

            xticks=[0,round(w[0],1), round(sum(w),1)]
            xline = [0]
            yline = [res.at[0,'Vst']]
            xpos = []
            a = 0
            for n, c in enumerate(w):
                a = a + w[n]
                if n == 0:
                    yline.append(res.at[0,'Vst'])
                    xline.append(w[n])
                    xpos.append(w[n]/2)
                else:
                    yline.append(res.at[n-1,'Vmid'])
                    xline.append(sum(w[:n]) + w[n]/2)
                    xpos.append(a - w[n]/2)
            xline.append(sum(w))
            yline.append(0.0)

            plt.style.use('default')
            fig = plt.figure(figsize=(8.0, 5.0))
            a = plt.bar(xpos, height = y, width = w, color = colors, alpha = 0.9,edgecolor = "black")
            plt.plot(xline, yline, 'k-o',linewidth=3.0,alpha=0.5)
            _ = plt.xticks(xticks, xticks)
            font1 = {'family':'serif','color':'navy','size':15}
            font2 = {'family':'serif','color':'k','size':12}
            plt.title(f'–†–∞—Å—á—ë—Ç —Ç–æ—Ä–º–æ–∑–Ω–æ–≥–æ –ø—É—Ç–∏ –º–µ—Ç–æ–¥–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ —Å–∫–æ—Ä–æ—Å—Ç–∏\n–Ω–∞—á–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—å {V0} –∫–º/—á, —à–∞–≥ {dV} –∫–º/—á',
                      fontdict = font1)
            plt.xlabel('–ü–æ–ª–Ω—ã–π —Ç–æ—Ä–º–æ–∑–Ω–æ–π –ø—É—Ç—å, –º', fontdict = font2)
            plt.ylabel('–°–∫–æ—Ä–æ—Å—Ç—å —Å–æ—Å—Ç–∞–≤–∞, –∫–º/—á', fontdict = font2)
            if numInt<21:
                plt.legend(a.patches, x)
            plt.grid(True)
            return fig
        self.df_rezult = res2 # ['all_vag','all_axes','all_massa','full_massa','Sp','tp','Sd','td','Sf','tf']
        self.df_rezTable = res # ['Vst','Ven','Vmid','Fikp','bT','wox','ic','c','St','t']
        self.plt_rezult = generatePlot()
        return
    # ---------------------------------------------------------------------------
    #
    #  –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–∫–Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    #
    # ---------------------------------------------------------------------------
    # root - —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–∫–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    def putReport(self, root):
        def onCanvasConfigure(e):
            canvas.itemconfig('frame', width=canvas.winfo_width())

        def create_table(pan, df, tran=False):
            tree = ttk.Treeview(pan, style="mystyle.Treeview")
            tree.tag_configure('gr0', background='lightcyan')

            rcnt, ccnt = df.shape
            if tran & rcnt==1:
                cols = ['–ü–∞—Ä–∞–º–µ—Ç—Ä','–ó–Ω–∞—á–µ–Ω–∏–µ']
                tree["columns"] = cols
                tree.column("#0", width=0,  stretch=tk.NO)
                tree.heading('#1', text=cols[0])
                tree.column(cols[0], anchor="center", width=30, minwidth=30, stretch=tk.YES)
                tree.heading('#2', text=cols[1])
                tree.column(cols[1], anchor="center", width=10, minwidth=10, stretch=tk.YES)
                pars = list(df.columns)
                idx = 0
                for par in pars:
                    idx += 1
                    fmt = getFmt(par)
                    if fmt[1]<0:
                        if len(fmt)>2:
                            val = fmt[2][int(df.at[0,par])]
                        else:
                            val = df.at[0,par]
                    else:
                        val = "{:1.{}f}".format(df.at[0,par],fmt[1])
                        #round(df.at[0,par],fmt[1])
                    values = [fmt[0], val]
                    tree.insert("", "end", values=values, tags=(f'gr{idx%2}',))

            else:

                tree["columns"] = list(df.columns)
                tree.column("#0", width=0,  stretch=tk.NO)
                idx = 0
                fmts = []
                for col in df.columns:
                    idx += 1
                    fmt = getFmt(col)
                    fmts.append(fmt)
                    tree.heading(f'#{idx}', text=fmt[0])
                    tree.column(col, anchor="center", width=30, minwidth=30, stretch=tk.YES)

                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É
                for index, row in df.iterrows():
                    values = []
                    for col in df.columns:
                        idx = len(values)
                        val = row[col]
                        if fmts[idx][1]<0:
                            if fmts[idx][1]<0:
                                if len(fmts[idx])>2:
                                    val = fmts[idx][2][int(val)]
                        else:
                            val = "{:1.{}f}".format(val,fmts[idx][1])
                        values.append(val)
                    #values = [row[col] for col in df.columns]
                    tree.insert("", "end", values=values, tags=(f'gr{index%2}',))

            tree.config(height=len(tree.get_children()))
            tree.pack(fill=tk.X, expand=0, padx=(10,10),pady=(3,10))

            tree.tag_configure('gr0', background='lightcyan')

            self.tables.append(tree)
        # -- - - - - - - - - - - -  - - - - - - -
        style = ttk.Style(root)
        style.theme_use("clam")
        style.configure("mystyle.Treeview", highlightthickness=0,
                        bd=2, font=('Calibri', 12),
                        background="lightyellow") # Modify the font of the body
        style.configure("mystyle.Treeview.Heading",
                        font=('Calibri', 14,'bold'),foreground='indigo',
                        background="deepskyblue") # Modify the font of the headings
        style.layout("mystyle.Treeview",
                     [('mystyle.Treeview.treearea', {'sticky': 'nswe'})])
        style.map("My.TButton",
          foreground=[('pressed', 'red'), ('active', 'blue')],
          background=[('pressed', '!disabled', 'black'),
                      ('active', 'white')])

        style.configure('My.TButton', font=('Arial','11','bold'))


        fr3 = tk.Frame(root)
        l3 = tk.Label(fr3, text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞".upper())
        l3.configure(font='Arial 19 bold', justify='center', anchor='center',
                     foreground = 'teal', background="whitesmoke")
        l3.pack(expand=1)
        fr3.pack(fill="x")

        fr2 = tk.Frame(root, background="whitesmoke")
        # bt = ttk.Button(fr2, text="–î–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö",width=45,
        #                style="My.TButton",)
        # bt.grid(row=0, column=0, pady=(0, 10),padx=(10, 10))
        bt2 = ttk.Button(fr2, text="–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ doc-—Ñ–∞–π–ª",width=45,
                         style="My.TButton",
                         command = self.putResult2docx)#putDocFile)
        bt2.grid(row=0, column=0,pady=(0, 10),padx=(10, 10))
        fr2.pack()


        canvas = tk.Canvas(root, borderwidth=0, background="#ffffff")
        frame= tk.Frame(canvas, background="dodgerblue")
        vsb = tk.Scrollbar(root, orient="vertical", command=canvas.yview)
        canvas.configure(yscrollcommand=vsb.set)
        vsb.pack(side="right", fill="y")
        canvas.pack(fill= tk.BOTH, expand=1)

        m = [self.extCondition,self.parLoko,self.parTrain,self.df_rezult,self.df_rezTable]
        self.tables = []
        for i in range(6):
            lbl = ttk.Label(frame, text=self.lab_names[i], relief="groove")
            lbl.configure(font='Arial 17 bold', justify='center',
                          foreground = 'yellow',anchor='center',background="darkblue")
            lbl.pack(fill= tk.X, expand=1, anchor='center')
            if i == 5:
                break
            create_table(frame, m[i], i in [0,1,3])


        fig = self.plt_rezult

        frmpic = tk.Frame(frame)
        frmpic.pack(fill=tk.X,expand=1)
        canvas2 = FigureCanvasTkAgg(fig, frmpic)
        toolbar = NavigationToolbar2Tk(canvas2, frmpic)
        toolbar.update()
        canvas2._tkcanvas.pack(fill=tk.X, expand=1)

        canvas.create_window((4, 4), window=frame, anchor="nw", tags="frame")
        root.grid_rowconfigure(0, weight=1)
        root.grid_columnconfigure(0, weight=1)

        canvas.update_idletasks()
        canvas.configure(scrollregion=canvas.bbox("all"))
        canvas.bind("<Configure>", onCanvasConfigure)
    # ---------------------------------------------------------------------------
    #
    #  –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ doc —Ñ–∞–π–ª
    #
    # ---------------------------------------------------------------------------
    def putResult2docx(self):
        tabls = []
        for tree in self.tables:
            nam_col = 0
            rows = []
            #print('---------------------------------')
            for row_id in tree.get_children():
                row = tree.item(row_id)['values']
                if nam_col == 0:
                    nam_col = [tree.heading(f'#{i}')['text'] for i in range(1,len(row)+1) ]
                rows.append(row)
            tabls.append({'name':self.lab_names[len(tabls)],'cols':nam_col,'rows':rows})
        models.write2docx.putDocFile('–†–∞—Å—á—ë—Ç –¥–ª–∏–Ω—ã —Ç–æ—Ä–º–æ–∑–Ω–æ–≥–æ –ø—É—Ç–∏ –ø–æ–µ–∑–¥–∞\n–º–µ—Ç–æ–¥ —Ä–∞—Å—á—ë—Ç–∞ –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º —Å–∫–æ—Ä–æ—Å—Ç–∏ (–ì—Ä–µ–±–µ–Ω—é–∫ 1969–≥)', tabls, [self.plt_rezult])


# –æ–ø–∏—Å–∞—Ç–µ–ª—å –∫–ª–∞—Å—Å–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –Ω–µ–º—É
metodDescription = ('–ú–µ—Ç–æ–¥ —Ä–∞—Å—á—ë—Ç–∞ –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º —Å–∫–æ—Ä–æ—Å—Ç–∏ (–ì—Ä–µ–±–µ–Ω—é–∫ 1969–≥)',
                    modelSpeed, ['V','dV'])

if __name__ == "__main__":
    print(metodDescription[0])