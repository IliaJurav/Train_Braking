"""
–ú–æ–¥—É–ª—å —Ä–∞—Å—á—ë—Ç–∞ –¥–ª–∏–Ω—ã —Ç–æ—Ä–º–æ–∑–Ω–æ–≥–æ –ø—É—Ç–∏ –º–µ—Ç–æ–¥–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ —Å–∫–æ—Ä–æ—Å—Ç–∏
–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–¥—ë—Ç—Å—è –º–µ—Ç–æ–¥–æ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤

    –í—ã–ø—É—Å–∫–Ω–∞—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –±–∞–∫–∞–ª–∞–≤—Ä–∞
    –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥—Å–∫–∏–π –ø–æ–ª–∏—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –ü–µ—Ç—Ä–∞ –í–µ–ª–∏–∫–æ–≥–æ
    –ò–Ω—Å—Ç–∏—Ç—É—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –Ω–∞—É–∫ –∏ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    –í—ã—Å—à–∞—è —à–∫–æ–ª–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
    –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 09.03.01 –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ –∏ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞
    2024 –≥–æ–¥

@author: –ñ—É—Ä–∞–≤—Å–∫–∏–π –ò–ª—å—è –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á
"""

import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.pyplot import cm
import numpy as np

import tkinter as tk
from tkinter import ttk
import models
from models.dopFunc import getFmt as getFmt
from models.dopFunc import get_eps_by_name as get_eps_by_name
from models.dopFunc import CalcPress as CalcPress
from models.dopFunc import calcKnt as calcKnt

from matplotlib.backends.backend_tkagg import (FigureCanvasTkAgg,
                                               NavigationToolbar2Tk)

# –æ–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞
class modelTime:
    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞
    def __init__(self, parTrain, parLoko, extCondition):
        # —Å–æ–∑–¥–∞—ë–º –∫–æ–ø–∏–∏ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –Ω–∏–∫—Ç–æ –Ω–µ –∏—Å–ø–æ—Ä—Ç–∏–ª
        self.parTrain = parTrain.copy()
        self.parLoko = parLoko.copy()
        # –ø—Ä–∞–≤–∏–º –∏—Ö –ø–æ–¥ –Ω—É–∂–¥—ã –º–æ–¥—É–ª—è
        if 'id' in parTrain.columns:
            self.parTrain.drop(['id'], inplace=True, axis=1)
        df = pd.DataFrame()
        df.index = extCondition.index
        df[['v0','slope','dt','type','way','air']] = extCondition[['v0','slope','dt','type','way','air']]
        self.extCondition = df
        self.speed = extCondition['v0'][0]
        self.interval = extCondition['dt'][0]
        self.ic = extCondition['slope'][0]
        self.way = extCondition['way'][0]
        self.air = extCondition['air'][0]
        # —Å–æ–∑–¥–∞—ë–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.bT = 0.0
        self.passenger = extCondition['type'][0] > 0
        self.Fikp = 0.0
        self.wox = 0.0
        self.c = 0.0
        self.Ploc = parLoko['massa'][0]
        self.eps = get_eps_by_name(parLoko['name'][0])
        self.Pvag = 0.0
        self.nOSv = 0
        self.df_rezult = 0
        self.df_rezTable= 0
        self.plt_rezult = 0
        self.tables = []
        self.lab_names=['–£—Å–ª–æ–≤–∏—è —Ä–∞—Å—á—ë—Ç–∞', '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–æ–∫–æ–º–æ—Ç–∏–≤–∞', '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Å—Ç–∞–≤–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º –≤–∞–≥–æ–Ω–æ–≤',
                   '–¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤', '–¢–∞–±–ª–∏—Ü–∞ –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º','–ì—Ä–∞—Ñ–∏–∫']
        # —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –Ω–µ –æ—Ç–≤–ª–µ–∫–∞—Ç—å—Å—è
        SKp = [0.0, 0,0, 0,0]
        SKp[parLoko['pads'][0]] = parLoko['axles'][0] * parLoko['force'][0]
        for index, row in parTrain.iterrows():
            p = int(row['pads'])
            SKp[p] = SKp[p] + row['count'] * row['force'] * row['axles']
            self.Pvag = self.Pvag + row['count'] * row['massa']
            self.nOSv = self.nOSv + row['count'] * row['axles']
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ùúóp –ø–æ —Ñ–æ—Ä–º—É–ª–µ (2)
        self.Teta = [x / (self.Pvag + self.Ploc) for x in SKp] # ]round(self.SKp / (self.Pvag + self.Ploc),3)
        if self.passenger:
            self.lenght = (parTrain['count'].sum()+1)*24.0
        else:
            self.lenght = (parTrain['count'].sum()+1)*12.0
    # —Ä–∞—Å—á–µ—Ç —Ñ–∏
    # pads - —Ç–∏–ø —Ç–æ—Ä–º–æ–∑–Ω—ã—Ö –∫–æ–ª–æ–¥–æ–∫ (0,1,2)
    # v - —Å–∫–æ—Ä–æ—Å—Ç—å –∫–º/—á
    def calcFi(self,pads,v):
        if pads == 0:
            return 0.27*(v+100.0)/(5.0*v+100.0) # —á—É–≥—É–Ω
        elif pads == 1:
            return 0.3*(v+100.0)/(5.0*v+100.0) # —á—É–≥—É–Ω —Å —Ñ–æ—Å—Ñ–æ—Ä–æ–º
        else:
            return 0.36*(v+150.0)/(2.0*v+150.0) # –∫–æ–º–ø–æ–∑–∏—Ç

    # ---------------------------------------------------------------------------
    #
    #  –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞—Å—á—ë—Ç
    #
    # ---------------------------------------------------------------------------
    def calculate(self):
        # –Ω–∞—á–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –∫–º/—á
        v = self.speed

        # (53) –æ—Å–Ω–æ–≤–Ω–æ–µ —É–¥–µ–ª—å–Ω–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –ø–æ–µ–∑–¥–∞
        # v - —Å–∫–æ—Ä–æ—Å—Ç—å –∫–º/—á
        def calcWox(v):
           def Wo(v):
               if self.nOSv == 0:
                   return 0.0
               qo = self.Pvag / self.nOSv # —Å—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞ –æ—Å–∏ –≤–∞–≥–æ–Ω–∞ –Ω–∞ —Ä–µ–ª—å—Å—ã
               if self.passenger:
               # (—Å—Ç—Ä 5) —É–¥–µ–ª—å–Ω–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –ø–∞—Å—Å–∞–∂–∏—Ä—Å–∫–∏—Ö –≤–∞–≥–æ–Ω–æ–≤
                   if self.way == 0:
                       # (13) —É–¥–µ–ª—å–Ω–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –ø–∞—Å—Å–∞–∂–∏—Ä—Å–∫–∏—Ö –≤–∞–≥–æ–Ω–æ–≤ –Ω–∞ –∑–≤–µ–Ω—å–µ–≤–æ–º –ø—É—Ç–∏
                       res = 6.9 + (78.5 + 1.76 * v + 0.03 * v * v) / qo
                   else:
                       # (14) —É–¥–µ–ª—å–Ω–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –ø–∞—Å—Å–∞–∂–∏—Ä—Å–∫–∏—Ö –≤–∞–≥–æ–Ω–æ–≤ –Ω–∞ –±–µ—Å—Å—Ç—ã–∫–æ–≤–æ–º –ø—É—Ç–∏
                       res = 6.9 + (78.5 + 1.57 * v + 0.022 * v * v) / qo
               else:
               # (—Å—Ç—Ä 5) —É–¥–µ–ª—å–Ω–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤—ã—Ö –≤–∞–≥–æ–Ω–æ–≤
                   if self.way == 0:
                       # (1) —É–¥–µ–ª—å–Ω–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤—ã—Ö –≤–∞–≥–æ–Ω–æ–≤ –Ω–∞ –∑–≤–µ–Ω—å–µ–≤–æ–º –ø—É—Ç–∏
                       res = 5.2 + (35.4 + 0.785 * v + 0.027 * v * v) / qo
                   else:
                       # (7) —É–¥–µ–ª—å–Ω–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤—ã—Ö –≤–∞–≥–æ–Ω–æ–≤ –Ω–∞ –±–µ—Å—Å—Ç—ã–∫–æ–≤–æ–º –ø—É—Ç–∏
                       res = 5.2 + (34.2 + 0.732 * v + 0.022 * v * v) / qo
#                   return 0.7 + (8 + 0.1 * v + 0.0025 * v * v) / qo
               return res / 9.8 # kH => ton
           def Wx(v): # (54) —É–¥–µ–ª—å–Ω–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –ª–æ–∫–æ–º–æ—Ç–∏–≤–∞ –Ω–∞ —Ö–æ–ª–æ—Å—Ç–æ–º —Ö–æ–¥—É
               if self.way == 0:
                   # ‚Äì—ç–ª–µ–∫—Ç—Ä–æ–≤–æ–∑—ã –∏ —Ç–µ–ø–ª–æ–≤–æ–∑—ã –Ω–∞ –∑–≤–µ–Ω—å–µ–≤–æ–º –ø—É—Ç–∏
                   res = 18.6 + 0.1 * v + 0.0029 * v * v # (15)
               else:
                   # ‚Äì—ç–ª–µ–∫—Ç—Ä–æ–≤–æ–∑—ã –∏ —Ç–µ–ø–ª–æ–≤–æ–∑—ã –Ω–∞ –±–µ—Å—Å—Ç—ã–∫–æ–≤–æ–º –ø—É—Ç–∏
                   res = 18.6 + 0.08 * v + 0.0024 * v * v # (17)
               return res / 9.8 # kH => ton
           return (Wo(v) * self.Pvag + Wx(v) * self.Ploc)/(self.Ploc + self.Pvag) * calcKnt(self.air, v, self.way)
        # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        tCur = 0.0
        Scur = 0.0
        Vcur = v
        dt = self.interval
        # –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        res = pd.DataFrame(columns=['Vst','Ven','Vmid','Fikp','bT',
                                    'wox','ic','c','St','t'])
        res2 = pd.DataFrame(columns=['all_vag','all_axes','all_massa','full_massa','full_len',
            'Sf','tf'])
        res2['all_vag'] = [self.parTrain['count'].sum()]
        res2['all_axes'] = [self.nOSv]
        res2['all_massa'] = [self.Pvag]
        res2['full_len'] = [self.lenght]
        res2['full_massa'] = [self.Pvag + self.Ploc]
        Sit = [Scur]
        Vit = [Vcur]
        # —É—á–µ—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        Vst = Vcur # —Å–∫–æ—Ä–æ—Å—Ç—å
        Vwt = int(Vcur / 10) * 10.0
        if Vst - Vwt < 0.1:
            Vwt = Vwt - 10.0
        if Vwt<0.0:
            Vwt = 0.0
        Lst = 0.0 # –ø—É—Ç—å
        Tst = 0 # –≤—Ä–µ–º—è
        # —Ü–∏–∫–ª –ø–æ–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è
        while Vcur>0.0:
           w = calcWox(Vcur)
           bT = round(1000.0 * sum([self.Teta[i] *
                          self.calcFi(i, Vcur) for i in range(3)]),1)
           kk = CalcPress(tCur+dt/2.0, self.lenght)
           dV = self.eps*(bT*kk/100.0+w+self.ic)/3600.0*dt
           if dV > Vcur:
               dt = dt * Vcur / (Vcur + dV)
               dV = Vcur
           dS = (Vcur - dV/2) * dt / 3.6
           Vcur = Vcur - dV
           Scur = Scur + dS
           # —Ñ–∏–∫—Å–∞—Ü–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
           if Vcur<=Vwt:
               idx = len(res)
               res.at[idx,'Vst'] = Vst
               res.at[idx,'Ven'] = Vwt
               Vmid = (Vst + Vwt) / 2.0
               res.at[idx,'Vmid'] = Vmid
               res.at[idx,'Fikp'] = sum([self.calcFi(i, Vmid) for i in range(3)])
               res.at[idx,'bT'] = round(1000.0 * sum([self.Teta[i] *
                          self.calcFi(i, Vmid) for i in range(3)]),1)
               res.at[idx,'wox'] = calcWox(Vmid)
               res.at[idx,'ic'] = self.ic
               res.at[idx,'c'] = res.at[idx,'wox'] + res.at[idx,'ic'] + res.at[idx,'bT']
               res.at[idx,'St'] = Scur - Lst
               Lst = Scur
               res.at[idx,'t'] = tCur - Tst
               Tst = tCur
               Vst = Vwt
               Vwt = Vwt - 10.0
               if Vwt<0.0:
                   Vwt = 0.0

           Sit.append(Scur)
           Vit.append(Vcur)
           tCur = tCur+dt

        res2['Sf'] =[Scur]
        res2['tf'] =[tCur - dt]

        # —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        def generatePlot():
            x = Sit
            y = Vit
            w = [0.0]
            for i in range(len(x)-1):
                w.append(x[i+1]-x[i])
            colors = cm.rainbow(np.linspace(0.9, 0.1, len(x))).tolist()
            colors.insert(0,"gainsboro")
            xticks=[i*100 for i in range(int(x[-1]/100.0)+1)]
            xticks.append(float('{:2.1f}'.format(x[-1])))

            plt.style.use('default')
            fig = plt.figure(figsize=(8.0, 5.0))
            plt.bar(x, height = y, width = w, color = colors, alpha = 0.9)
            plt.plot(x, y, 'k',linewidth=2.0,alpha=0.9)
            _ = plt.xticks(xticks, xticks)#, rotation=45)
            font1 = {'family':'serif','color':'navy','size':15}
            font2 = {'family':'serif','color':'k','size':12}
            plt.title('–†–∞—Å—á—ë—Ç —Ç–æ—Ä–º–æ–∑–Ω–æ–≥–æ –ø—É—Ç–∏ –º–µ—Ç–æ–¥–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –≤—Ä–µ–º–µ–Ω–∏',
                      fontdict = font1)
            plt.xlabel('–ü–æ–ª–Ω—ã–π —Ç–æ—Ä–º–æ–∑–Ω–æ–π –ø—É—Ç—å, –º', fontdict = font2)
            plt.ylabel('–°–∫–æ—Ä–æ—Å—Ç—å —Å–æ—Å—Ç–∞–≤–∞, –∫–º/—á', fontdict = font2)
            plt.grid(True)
            return fig

        self.df_rezult = res2 # ['all_vag','all_axes','all_massa','full_massa','Sp','tp','Sd','td','Sf','tf']
        self.df_rezTable = res # ['Vst','Ven','Vmid','Fikp','bT','wox','ic','c','St','t']
        self.plt_rezult = generatePlot()
        return [Vit,Sit,tCur]

    # ---------------------------------------------------------------------------
    #
    #  –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–∫–Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    #
    # ---------------------------------------------------------------------------
    # root - —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–∫–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    def putReport(self, root):
        def onCanvasConfigure(e):
            canvas.itemconfig('frame', width=canvas.winfo_width())
        # –≤—ã–≤–æ–¥ –ø–∞–Ω–µ–ª–∏ —Å —Ç–∞–±–ª–∏—Ü–µ–π
        def create_table(pan, df, tran=False):
            tree = ttk.Treeview(pan, style="mystyle.Treeview")
            tree.tag_configure('gr0', background='lightcyan')

            rcnt, ccnt = df.shape
            if tran & rcnt==1:
                cols = ['–ü–∞—Ä–∞–º–µ—Ç—Ä','–ó–Ω–∞—á–µ–Ω–∏–µ']
                tree["columns"] = cols
                tree.column("#0", width=0,  stretch=tk.NO)
                tree.heading('#1', text=cols[0])
                tree.column(cols[0], anchor="center", width=30, minwidth=30, stretch=tk.YES)
                tree.heading('#2', text=cols[1])
                tree.column(cols[1], anchor="center", width=10, minwidth=10, stretch=tk.YES)
                pars = list(df.columns)
                idx = 0
                for par in pars:
                    idx += 1
                    fmt = getFmt(par)
                    if fmt[1]<0:
                        if len(fmt)>2:
                            val = fmt[2][int(df.at[0,par])]
                        else:
                            val = df.at[0,par]
                    else:
                        val = "{:1.{}f}".format(df.at[0,par],fmt[1])
                        #round(df.at[0,par],fmt[1])
                    values = [fmt[0], val]
                    tree.insert("", "end", values=values, tags=(f'gr{idx%2}',))

            else:

                tree["columns"] = list(df.columns)
                tree.column("#0", width=0,  stretch=tk.NO)
                idx = 0
                fmts = []
                for col in df.columns:
                    idx += 1
                    fmt = getFmt(col)
                    fmts.append(fmt)
                    tree.heading(f'#{idx}', text=fmt[0])
                    tree.column(col, anchor="center", width=30, minwidth=30, stretch=tk.YES)

                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É
                for index, row in df.iterrows():
                    values = []
                    for col in df.columns:
                        idx = len(values)
                        val = row[col]
                        if fmts[idx][1]<0:
                            if fmts[idx][1]<0:
                                if len(fmts[idx])>2:
                                    val = fmts[idx][2][int(val)]
                        else:
                            val = "{:1.{}f}".format(val,fmts[idx][1])
                        values.append(val)
                    #values = [row[col] for col in df.columns]
                    tree.insert("", "end", values=values, tags=(f'gr{index%2}',))

            tree.config(height=len(tree.get_children()))
            tree.pack(fill=tk.X, expand=0, padx=(10,10),pady=(3,10))

            tree.tag_configure('gr0', background='lightcyan')

            self.tables.append(tree)
        # -- - - - - - - - - - - -  - - - - - - -
        # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª–∏
        style = ttk.Style(root)
        style.theme_use("clam")
        style.configure("mystyle.Treeview", highlightthickness=0,
                        bd=2, font=('Calibri', 12),
                        background="lightyellow") # Modify the font of the body
        style.configure("mystyle.Treeview.Heading",
                        font=('Calibri', 14,'bold'),foreground='indigo',
                        background="deepskyblue") # Modify the font of the headings
        style.layout("mystyle.Treeview",
                     [('mystyle.Treeview.treearea', {'sticky': 'nswe'})])
        style.map("My.TButton",
          foreground=[('pressed', 'red'), ('active', 'blue')],
          background=[('pressed', '!disabled', 'black'),
                      ('active', 'white')])

        style.configure('My.TButton', font=('Arial','11','bold'))


        # –ø–∞–Ω–µ–ª—å –∑–∞–≥–æ–ª–æ–≤–∫–∞
        fr3 = tk.Frame(root)
        l3 = tk.Label(fr3, text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞".upper())
        l3.configure(font='Arial 19 bold', justify='center', anchor='center',
                     foreground = 'teal', background="whitesmoke")
        l3.pack(expand=1)
        fr3.pack(fill="x")

        # –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
        fr2 = tk.Frame(root, background="whitesmoke")
        # bt = ttk.Button(fr2, text="–î–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö",width=45,
        #                style="My.TButton",)
        # bt.grid(row=0, column=1, pady=(0, 10),padx=(10, 10))
        bt2 = ttk.Button(fr2, text="–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ doc-—Ñ–∞–π–ª",width=45,
                         style="My.TButton",
                         command = self.putResult2docx)#putDocFile)
        bt2.grid(row=0, column=0, pady=(0, 10),padx=(10, 10))
        fr2.pack()

        # –ø–∞–Ω–µ–ª—å –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥—É—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞—Ç—å
        canvas = tk.Canvas(root, borderwidth=0, background="#ffffff")
        frame= tk.Frame(canvas, background="dodgerblue")
        vsb = tk.Scrollbar(root, orient="vertical", command=canvas.yview)
        canvas.configure(yscrollcommand=vsb.set)
        vsb.pack(side="right", fill="y")
        canvas.pack(fill= tk.BOTH, expand=1)

        # –≤—ã–≤–æ–¥–∏–º —Ç–∞–±–ª–∏—á–∫–∏ –ø–æ–æ—á–µ—Ä–µ–¥–∏
        m = [self.extCondition,self.parLoko,self.parTrain,self.df_rezult,self.df_rezTable]
        self.tables = []
        for i in range(6):
            lbl = ttk.Label(frame, text=self.lab_names[i], relief="groove")
            lbl.configure(font='Arial 17 bold', justify='center',
                          foreground = 'yellow',anchor='center',background="darkblue")
            lbl.pack(fill= tk.X, expand=1, anchor='center')
            if i == 5:
                break
            create_table(frame, m[i], i in [0,1,3])

        # –¥–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        fig = self.plt_rezult
        frmpic = tk.Frame(frame)
        frmpic.pack(fill=tk.X,expand=1)
        canvas2 = FigureCanvasTkAgg(fig, frmpic)
        toolbar = NavigationToolbar2Tk(canvas2, frmpic)
        toolbar.update()
        canvas2._tkcanvas.pack(fill=tk.X, expand=1)

        canvas.create_window((4, 4), window=frame, anchor="nw", tags="frame")
        root.grid_rowconfigure(0, weight=1)
        root.grid_columnconfigure(0, weight=1)

        canvas.update_idletasks()
        canvas.configure(scrollregion=canvas.bbox("all"))
        canvas.bind("<Configure>", onCanvasConfigure)
    # ---------------------------------------------------------------------------
    #
    #  –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ doc —Ñ–∞–π–ª
    #
    # ---------------------------------------------------------------------------
    def putResult2docx(self):
        tabls = []
        for tree in self.tables:
            nam_col = 0
            rows = []
            #print('---------------------------------')
            for row_id in tree.get_children():
                row = tree.item(row_id)['values']
                if nam_col == 0:
                    nam_col = [tree.heading(f'#{i}')['text'] for i in range(1,len(row)+1) ]
                rows.append(row)
            tabls.append({'name':self.lab_names[len(tabls)],'cols':nam_col,'rows':rows})
        models.write2docx.putDocFile('–†–∞—Å—á—ë—Ç –¥–ª–∏–Ω—ã —Ç–æ—Ä–º–æ–∑–Ω–æ–≥–æ –ø—É—Ç–∏ –ø–æ–µ–∑–¥–∞\n–º–µ—Ç–æ–¥ —Ä–∞—Å—á—ë—Ç–∞ –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º –≤—Ä–µ–º–µ–Ω–∏ (–ú—É–≥–∏–Ω—à—Ç–µ–π–Ω 2014–≥)', tabls, [self.plt_rezult])

# –æ–ø–∏—Å–∞—Ç–µ–ª—å –∫–ª–∞—Å—Å–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –Ω–µ–º—É
metodDescription = ('–ú–µ—Ç–æ–¥ —Ä–∞—Å—á—ë—Ç–∞ –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º –≤—Ä–µ–º–µ–Ω–∏ (–ú—É–≥–∏–Ω—à—Ç–µ–π–Ω 2014–≥)',
                    modelTime, ['V','dt'])

if __name__ == "__main__":
    print(metodDescription[0])